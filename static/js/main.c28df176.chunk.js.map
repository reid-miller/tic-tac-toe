{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","FirstPick","visible","text","PlayerSelect","onePlayer","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","AISymbol","setState","q","slice","AIMove","board","sym","possibleMoves","checkMoves","scores","depth","Math","floor","random","length","push","minValue","maxValue","console","log","highscore","indexh","computerTurn","concat","window","location","reload","calculateWinner","j","step","otherTurn","current","undefined","status","winner","map","move","desc","key","jumpTo","handleClick","k","AIFirst","refreshPage","playerClick","lines","a","b","c","err","message","s","total","gameover","rate","alpha","succ","max","beta","min","gameState","player","returnList","copyofboard","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c28df176.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n      return (\r\n        <button className=\"square\" onClick={() =>  props.onClick()}>\r\n          {props.value}\r\n        </button>\r\n      );\r\n  }\r\n\r\n  function FirstPick(props) {\r\n    if(props.visible) {\r\n      return (\r\n        <button className=\"\" onClick={() =>  props.onClick(3)}>\r\n          {props.text}\r\n        </button>\r\n      );\r\n    } else {\r\n      return(<div></div>);\r\n    }\r\n  }\r\n\r\n  function PlayerSelect(props) {\r\n    if (props.onePlayer) { \r\n      return (\r\n        <div>\r\n        <button className=\"btn disabled\" onClick={() =>  props.onClick(1)}>\r\n          One Player\r\n        </button>\r\n        /\r\n        <button className=\"btn\" onClick={() =>  props.onClick(2)}>\r\n          Two Player\r\n        </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n        <button className=\"btn\" onClick={() =>  props.onClick(1)}>\r\n          One Player\r\n        </button>\r\n        /\r\n        <button className=\"btn disabled\" onClick={() =>  props.onClick(2)}>\r\n          Two Player\r\n        </button>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return ( \r\n        <Square \r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n        onePlayer: true,\r\n        AISymbol: 'O',\r\n      }\r\n    }\r\n\r\n    AIFirst(){\r\n      this.setState({\r\n        AISymbol: 'X'\r\n      })\r\n    }\r\n\r\n    otherTurn(q) {\r\n      if(q === 3) {\r\n        this.setState({AISymbol: 'X'});\r\n      }\r\n      const AISymbol = this.state.AISymbol;\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      var AIMove = computerTurn(current.squares, AISymbol);\r\n        this.setState({\r\n          history: history.concat([\r\n            {\r\n            squares: AIMove,\r\n            }\r\n          ]),\r\n          stepNumber: history.length,\r\n          xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    refreshPage() {\r\n      window.location.reload(false);\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if(calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n          squares: squares,\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n\r\n    playerClick(j) {\r\n      let onePlayer = this.state.onePlayer;\r\n      if(j === 1 && !onePlayer) {\r\n        this.setState({\r\n          onePlayer: true,\r\n          history: [{\r\n            squares: Array(9).fill(null),\r\n          }],\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n        });\r\n      } else if (j === 2 && onePlayer) {\r\n        this.setState({\r\n          onePlayer: false,\r\n          history: [{\r\n            squares: Array(9).fill(null),\r\n          }],\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    render() {\r\n\r\n      if (this.state.onePlayer && this.state.xIsNext && this.state.AISymbol === 'X') {\r\n        this.otherTurn();\r\n      } else if(!this.state.xIsNext && this.state.AISymbol === 'O' && this.state.onePlayer){\r\n        this.otherTurn();\r\n      }\r\n\r\n      const history = this.state.history;\r\n      var current = history[this.state.stepNumber];\r\n      // Fix bug where current.squares went undefined after a full board\r\n      if (current.squares === undefined)\r\n        current = history[this.state.stepNumber-1];\r\n\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}\r\n  </button>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      let status;\r\n      if (winner === 'TIE') {\r\n        status = 'Draw';\r\n      }\r\n      else if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <h3 className=\"title\">Tic Tac Toe</h3>\r\n          <div className=\"game-board\">\r\n            <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <FirstPick\r\n              onClick={(k) => this.AIFirst()}\r\n              text=\"AI Go First\"\r\n              visible={this.state.stepNumber === 0 && this.state.onePlayer}\r\n            />\r\n            <FirstPick\r\n              onClick={(k) => this.refreshPage()}\r\n              text=\"Restart\"\r\n              visible={winner}\r\n            />\r\n            <PlayerSelect\r\n            onClick={(j) => this.playerClick(j)}\r\n            onePlayer={this.state.onePlayer}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n//\r\n// <ol>{moves}</ol>\r\n  function calculateWinner(squares) {\r\n    if (squares == null) {\r\n      return 'TIE'\r\n    }\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      try {\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n      } catch(err) {\r\n        console.log(err.message);\r\n        console.log(a + \"\" + b + \"\" + c)\r\n        console.log(squares);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      if(squares[i] == null) {\r\n        return null;\r\n      }\r\n    }\r\n    return 'TIE';\r\n  }\r\n\r\n  function depth(s) {\r\n    let total = 0;\r\n    for(var i = 0; i < s.length; i++) {\r\n      if (s[i] == null) {\r\n        total += 1\r\n      }\r\n    }\r\n    return total;\r\n  }\r\n\r\n  function computerTurn(board, sym) {\r\n    var possibleMoves = checkMoves(board, sym);\r\n    var scores = [];\r\n\r\n    // If empty board do a random move\r\n    if (depth(board) === 9)\r\n      return possibleMoves[Math.floor(Math.random() * Math.floor(9))]\r\n    \r\n    if(sym === 'X') {\r\n      for (let i = 0; i < possibleMoves.length; i++) {\r\n        scores.push(minValue(possibleMoves[i], depth(possibleMoves[i])));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < possibleMoves.length; i++) {\r\n        scores.push(maxValue(possibleMoves[i], depth(possibleMoves[i])));\r\n      }\r\n    }\r\n\r\n    console.log(scores);\r\n\r\n    let highscore = sym === 'X' ? -9999 : 9999;\r\n    var indexh = 0;\r\n\r\n    if(sym === 'X') {\r\n    for (let i = 0; i < scores.length; i++) {\r\n      if (scores[i] > highscore) {\r\n        highscore = scores[i];\r\n        indexh = i;\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 0; i < scores.length; i++) {\r\n      if (scores[i] < highscore) {\r\n        highscore = scores[i];\r\n        indexh = i;\r\n      }\r\n    }\r\n  }\r\n\r\n    return possibleMoves[indexh];\r\n\r\n  }\r\n\r\n  // Check if board is full\r\n  function gameover(s) {\r\n    for(var i = 0; i < 9; i++) {\r\n      if(s[i] == null) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function maxValue(s, depth) {\r\n    // If in a terminal state then return state score\r\n    if(gameover(s) || rate(s) !== 0) {\r\n      let score = rate(s);\r\n      return score;\r\n    }\r\n\r\n    let alpha = -99999\r\n    let succ = checkMoves(s, 'X');\r\n    for(let i = 0; i < succ.length; i++) {\r\n      alpha = Math.max(alpha, minValue(succ[i], depth - 1));\r\n    }\r\n\r\n    return alpha;\r\n  }\r\n\r\n  function minValue(s, depth) {\r\n    // If in a terminal state then return state score\r\n    if(gameover(s) || rate(s) !== 0) {\r\n      let score = rate(s);\r\n      return score;\r\n    }\r\n\r\n    let beta = 99999\r\n    let succ = checkMoves(s, 'O');\r\n    for(let i = 0; i < succ.length; i++) {\r\n      beta = Math.min(beta, maxValue(succ[i], depth - 1));\r\n    }\r\n\r\n    return beta;\r\n  }\r\n  \r\n\r\n  function rate(s) {\r\n    var gameState = calculateWinner(s);\r\n     if (gameState === 'X') {\r\n      return 1;\r\n    } else if (gameState ==='O'){\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Returns list of all possible moves\r\n  function checkMoves(board, player) {\r\n    var returnList = [];\r\n\r\n    for (var i = 0; i < 9; i++) {\r\n      var copyofboard = Array.from(board);\r\n      if (copyofboard[i] == null) {\r\n        copyofboard[i] = player;\r\n        returnList.push(copyofboard);\r\n      }\r\n    }\r\n\r\n    return returnList;\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}